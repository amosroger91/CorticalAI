import { LLMFramework, fetchAPI } from '../../index.js';
import dotenv from 'dotenv';

dotenv.config();

// Add debug line
console.log('ENV DEBUG:', {
    primary: process.env.APP_PRIMARYCOLOR,
    secondary: process.env.APP_SECONDARYCOLOR,
    name: process.env.APP_NAME
});

const CONFIG = {
    systemPrompt: `You are a search assistant. You can chat normally AND search DuckDuckGo.

IMPORTANT RULES:
1. For search requests: respond with ONLY the function call, nothing else
2. For chat: respond normally without any function calls

SEARCH requests (respond with ONLY the function):
- "look up Node.js" → FUNCTION:searchDuck:Node.js
- "find latest news" → FUNCTION:searchDuck:latest news

CHAT requests (respond normally):
- "hello" → "Hello! How can I help you today?"
- "what can you do?" → "I can help you search DuckDuckGo or chat with you!"

NEVER mix conversation and function calls in the same response.
Either respond with ONLY "FUNCTION:searchDuck:[term]" OR respond conversationally.`,

    functions: {
        searchDuck: {
            handler: async (searchTerm) => {
                console.log(`=== HANDLER CALLED ===`);
                console.log(`Searching DuckDuckGo for: ${searchTerm}`);

                try {
                    const url = new URL("https://api.duckduckgo.com/");
                    url.searchParams.set('q', searchTerm.trim());
                    url.searchParams.set('format', 'json');
                    url.searchParams.set('no_redirect', '1');
                    url.searchParams.set('skip_disambig', '1');

                    console.log('DuckDuckGo API URL:', url.toString());
                    const response = await fetchAPI(url.toString());

                    // Debug output
                    console.log('Response type:', typeof response);
                    console.log('AbstractText exists:', !!response.AbstractText);

                    if (response.AbstractText || (response.RelatedTopics && response.RelatedTopics.length > 0)) {
                        return {
                            success: true,
                            abstract: response.AbstractText || null,
                            relatedTopics: response.RelatedTopics ? response.RelatedTopics.map(t => t.Text || t.Name) : [],
                            searchTerm
                        };
                    } else {
                        console.log('FAILURE: No results found');
                        return {
                            success: false,
                            message: `No results found for "${searchTerm}". Try different keywords.`
                        };
                    }
                } catch (error) {
                    console.error('DuckDuckGo API error:', error);
                    return {
                        success: false,
                        error: `Search failed: ${error.message}`
                    };
                }
            },

            parseArgs: (rawArgs) => {
                console.log('parseArgs called with:', rawArgs);
                let searchTerm = rawArgs.trim();
                if (!searchTerm || searchTerm === '[actual_search_term]') {
                    throw new Error('LLM used placeholder text instead of actual search term');
                }
                return searchTerm;
            }
        }
    }
};

// start the web server
const framework = new LLMFramework(CONFIG);
framework.start();
